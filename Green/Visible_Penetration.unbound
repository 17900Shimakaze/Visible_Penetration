(def element SlotRenderer (_id:str) layout=true
	(scope
		(event emptyEvent)

		
		(var selfVehicleWatcher:gfx = "$datahub.getFirstWatcher(CC.selfVehicle)")
		(var entity:gfx = "selfVehicleWatcher.entity" (event "selfVehicleWatcher.event"))
		(var controller:gfx = "entity ? entity.weaponController : null" (event "entity.evAdded") (event "entity.evRemoved"))		
		(var shipInfo:gfx = "entity ? $datahub.getEntity(entity.vehicleInfo.shipInfoEntityId) : null")
		(var slot:gfx = "$datahub.getPrimaryEntity(CC.weaponSlot, _id)")

		(var slotOptions:gfx = "slot ? slot.slotOptions : null" (event "slot.evAdded") (event "slot.evRemoved"))
		(var state:number = "slot ? slot.weaponSlot.state : 0" (event "slot.weaponSlot.evStateChanged"))
		(var weaponType:number = "slot.weaponSlot.type")

		(var ammoEntity:gfx = "$datahub.getPrimaryEntity(CC.ammo, slot.weaponSlot.id)")
		(var hasSecondaryAmmo:gfx = "ammoEntity ? ammoEntity.ammo.hasSecondaryAmmo : false")
		(var isAutoUsage:bool = "ammoEntity ? ammoEntity.ammo.isAutoUsage : false")
		(var squadId:number = "ammoEntity ? ammoEntity.ammo.squadId : -1")
		(var ownerEntity:gfx = "weaponType == SC.Ships.SHIP_WEAPON_TYPES.AIRPLANES	? $datahub.getPrimaryEntity(CC.ownSquadron, squadId)
																					: $datahub.getSingleEntity(CC.playerAvatar)")

		(var uniqueFeatures:array = "ammoEntity.ammo ? ammoEntity.ammo.viewData.uniqueFeatures : []" (event "ammoEntity.ammo.evUpdated"))
		(var hasUniqueFeatures:bool = "uniqueFeatures.length > 0")

		(var altFireModeEntity:gfx = "$datahub.getSingleEntity(CC.altFireMode)")
		(var altFireModeComponent:gfx = "altFireModeEntity.altFireMode")
		(var isAltFireModeActive:bool = "altFireModeComponent.isActive"  (event "altFireModeComponent.evIsActiveChanged"))


		(var fireModeEntity:gfx = "$datahub.getSingleEntity(CC.fireModeSlot)")
		(var fireModeComponent:gfx = "fireModeEntity.fireModeSlot")
		(var isBurstFire:bool = "fireModeComponent.isBurstFire")
		(var isCanBurst:bool = "isBurstFire && weaponType == SC.Ships.SHIP_WEAPON_TYPES.ARTILLERY")
		(var isActiveBurst:bool = "isCanBurst && isAltFireModeActive")

		(var limitedAmmoEntity:gfx = "$datahub.getPrimaryEntity(CC.limitedAmmo, slot.weaponSlot.id)")
		(var maxAmmoCount:number = "limitedAmmoEntity ? limitedAmmoEntity.limitedAmmo.maxAmmoCount : -1")
		(var currentAmmoCount:number = "limitedAmmoEntity ? limitedAmmoEntity.limitedAmmo.currentAmmoCount : -1" (event "limitedAmmoEntity.limitedAmmo.evCurrentAmmoCountChanged"))
		(var isSecondaryAmmoDepleted:bool = "maxAmmoCount > 0 && currentAmmoCount == 0")

		(var isSecondaryActive:bool = "isAltFireModeActive && hasSecondaryAmmo && !isSecondaryAmmoDepleted")

		
		(var status:str = "	slot.weaponSlot.state == SC.Weapons.GUN_STATE.DESTROYED ? '_inactive' :
							isIn(slot.weaponSlot.state, [SC.Weapons.GUN_STATE.SWITCHING_CRITICAL, SC.Weapons.GUN_STATE.CRITICAL]) ? '_disabled'
																					: ''" (event "slot.weaponSlot.evStateChanged"))

		(var icon:str = "isSecondaryActive ? 'url:../ammo/' + _id + '_sec' + status + '.png' : 'url:../ammo/' + _id + status + '.png'")

		
		(var command:number = "slot.weaponSlot.command")

		
		(var animationProgress:number = "1")
		(var isAnimated:bool = "animationProgress < 1")

		
		(var _width:number = "SLOT_SIZE")
		(var _height:number = "SLOT_SIZE")
		(var isWeaponActive:bool = "controller ? (controller.selectedWeapon == weaponType) : false" (event "controller.evSelectedWeaponChanged"))
		(var isActive:bool = "slot.weaponSlot.active" (event "slot.weaponSlot.evActiveChanged"))
		(var isSelected:bool = "slot.weaponSlot.selected" (event "slot.weaponSlot.evSelectedChanged"))
		(var isAlive:bool = "state < SC.Weapons.GUN_STATE.CRITICAL")
		(var isWorking:bool = "state == SC.Weapons.GUN_STATE.WORK")
		(var isReloading:bool = "state == SC.Weapons.GUN_STATE.RELOAD")
		(var isCharging:bool = "state == SC.Weapons.GUN_STATE.CHARGE")
		(var isDisabled:bool = "state == SC.Weapons.GUN_STATE.DISABLED")

		(var isAngleVisType:bool = "slotOptions && slotOptions.type == SC.Battle.SLOT_VISUALIZATION_TYPE.TORPEDO_ANGLE_SELECTION")
		(var isAngleVisTypeNeedBg:bool = "isAngleVisType && slotOptions.items.length > 0")
		(var isSelectorVisible:bool = "isAngleVisType && slotOptions.showItemsSelector && slotOptions.items.length > 1")
		(var isAirplanesVisType:bool = "slotOptions && slotOptions.type == SC.Battle.SLOT_VISUALIZATION_TYPE.AIRPLANES")
		(var isSerialLoaderVisType:bool = "slotOptions && slotOptions.type == SC.Battle.SLOT_VISUALIZATION_TYPE.SERIAL_LOADER")

		(var isPingerType:bool = "slotOptions && slotOptions.type == SC.Battle.SLOT_VISUALIZATION_TYPE.PINGER_ACTIVE_COUNT")
		(var shipTTX:gfx = "entity ? entity.selfVehicle.shipTTX : null")
		(var isPingerCountEnable:bool = "isPingerType && (shipTTX ? shipTTX.pinger.maxTargets.value > 0 : false)")

		(var cameraEntity:gfx = "$datahub.getSingleEntity(CC.camera)")
		(macro GET_PREF 'altVisionMode' "'battle.altVision.mode'")
		(var isAltVision:bool = "cameraEntity.camera.altVision || altVisionMode >= AltVisionMode.ADAPTIVE" (event "cameraEntity.camera.evAltVisionChanged"))

		(var optionsCommandId:number = "slotOptions ? slotOptions.commandId : Cmd.CMD_NONE")

		
		(var isHotKeyActive:bool = "isWeaponActive && (isSelected || isActive)")
		(var isHotKeyEnabled:bool = "command && !isAutoUsage")
		(var isHotKeyToggled:bool = "isActive && isWeaponActive")

		
		(var progress:number = "slot.progress.max != 0 ? 1 - slot.progress.value / slot.progress.max : 0" (event "slot.progress.evChanged"))
		(var remain:number = "isWorking ? slot.progress.value : slot.progress.max - slot.progress.value" (event "slot.progress.evChanged"))

		(var showProgressBar:bool = "(isActive || isAirplanesVisType) && progress > 0")

		(controller $Animation
			(bindcall play
				duration="0.1" delay="0"
				from="{progress: 0, animationProgress: 0}"
				to="{progress: 1, animationProgress: 1}"
				(event "slot.weaponSlot.evCharged")
			)
		)

		(var slotAlpha:number = "isActive || (isWeaponActive && isSelected) || isAirplanesVisType ? 1 : 0.6")

		(macro STAGE_SIZE)

		#mod
        (var _overMatch:str = "shipTTX.artillery && shipTTX.artillery.ammoAP && shipTTX.artillery.ammoAP.caliber ? floor(shipTTX.artillery.ammoAP.caliber.value / 14.3) : 'N/A'")
        (var _hePenetration:str = "shipTTX.artillery && shipTTX.artillery.ammoHE && shipTTX.artillery.ammoHE.piercing ? shipTTX.artillery.ammoHE.piercing.value : 'N/A'")
	    (var _csPenetration:str = "shipTTX.artillery && shipTTX.artillery.ammoCS && shipTTX.artillery.ammoCS.piercing ? shipTTX.artillery.ammoCS.piercing.value : 'N/A'")
		(var _airSupportP:str = "shipTTX.airSupport && shipTTX.airSupport.bomberHE && shipTTX.airSupport.bomberHE.bombHE && shipTTX.airSupport.bomberHE.bombHE.piercing ? shipTTX.airSupport.bomberHE.bombHE.piercing.value : 'N/A'")
		
		(var _fighterHEP:str = "shipTTX.squadrons && shipTTX.squadrons.fighter && shipTTX.squadrons.fighter.rocketHE && shipTTX.squadrons.fighter.rocketHE.piercing ? shipTTX.squadrons.fighter.rocketHE.piercing.value : 'N/A'")
		(var _diveHEP:str = "shipTTX.squadrons && shipTTX.squadrons.diveBomber && shipTTX.squadrons.diveBomber.bombHE && shipTTX.squadrons.diveBomber.bombHE.piercing ? shipTTX.squadrons.diveBomber.bombHE.piercing.value : 'N/A'")
		(var _skipHEP:str = "shipTTX.squadrons && shipTTX.squadrons.skipBomber && shipTTX.squadrons.skipBomber.bombHE && shipTTX.squadrons.skipBomber.bombHE.piercing ? shipTTX.squadrons.skipBomber.bombHE.piercing.value : 'N/A'")
		
		(var _altFighterHEP:str = "shipTTX.squadrons && shipTTX.squadrons.fighterAlt && shipTTX.squadrons.fighterAlt.rocketHE && shipTTX.squadrons.fighterAlt.rocketHE.piercing ? shipTTX.squadrons.fighterAlt.rocketHE.piercing.value : 'N/A'")
		(var _altDiveHEP:str = "shipTTX.squadrons && shipTTX.squadrons.diveBomberAlt && shipTTX.squadrons.diveBomberAlt.bombHE && shipTTX.squadrons.diveBomberAlt.bombHE.piercing ? shipTTX.squadrons.diveBomberAlt.bombHE.piercing.value : 'N/A'")
		(var _altSkipHEP:str = "shipTTX.squadrons && shipTTX.squadrons.skipBomberAlt && shipTTX.squadrons.skipBomberAlt.bombHE && shipTTX.squadrons.skipBomberAlt.bombHE.piercing ? shipTTX.squadrons.skipBomberAlt.bombHE.piercing.value : 'N/A'")
	    
		#(var _airSupDC_Damage:str = "shipTTX.squadrons && shipTTX.airSupport.bomberDC && shipTTX.airSupport.bomberDC.bombDC && (shipTTX.airSupport.bomberDC.bombDC.numBombs && shipTTX.airSupport.bomberDC.bombDC.damage) ? (shipTTX.airSupport.bomberDC.bombDC.damage.value + '*' + shipTTX.airSupport.bomberDC.bombDC.numBombs.value) : 'N/A'")
		#mod
	)

	(style
		(flow = "horizontal")
		(bind marginRight "slot.weaponSlot.tail	&& stageHeight >= 900	? PANEL_GROUP_MARGIN
																		: PANEL_ITEM_MARGIN")
	)

	(bind name "'button_ammo_' + _id")
	(controller $Instance
		(renderer = "'AngleSwitcher'")
		(bind enabled "isSelectorVisible")
		(args	_command="optionsCommandId"
				_height="_height")
		(exprs
			(scope
				(bind weaponSelected "isWeaponActive")
				(bind _selected "slotOptions && slotOptions.selected" (event "slotOptions.evSelectedChanged"))
				(bind _options "slotOptions ? slotOptions.items : []")
			)
		)
	)

	(controller $Instance renderer='SerialLoaderInfo'
		(bind enabled "isSerialLoaderVisType")
		(args "weaponType")
	)

	
	(block
		
		(bind name "isActive && isWeaponActive ? 'selected' : 'not_selected'")

		(block
			(controller $Instance renderer='AngleBackground'
				(bind enabled "isAlive && isAngleVisTypeNeedBg")
				(args _width = "_width" _height = "_height")
				(exprs
					(scope
						(bind _selected "slotOptions.selected" (event "slotOptions.evSelectedChanged"))
						(bind _options "slotOptions.items")
					)
				)
			)
			(bind alpha "isActive || (isWeaponActive && isSelected) ? 1 : 0")
		)

		
		(element SlotItem
			(scope
				(bind _itemImageUrl "icon")
				(bind _isSelectable "!isAutoUsage")
				(bind _width "_width")
				(bind _height "_height")
				(bind _isLocked "isDisabled")
				(bind _selectedImageUrl "isCharging || isAnimated ? 'url:../battle_hud/weapons_panel/slot/weapon_panel_slot_stroke_blue.png' : ''")
				(bind _isPreSelected "isWeaponActive && isSelected")
				(bind _isSelected "isWeaponActive && isActive")

				(bind _id "_id")
				(bind _overMatch "_overMatch")
				(bind _hePenetration "_hePenetration")
				(bind _csPenetration "_csPenetration")
				(bind _airSupportP "_airSupportP")

				(bind _fighterHEP "_fighterHEP")
				(bind _diveHEP "_diveHEP")
				(bind _skipHEP "_skipHEP")

				(bind _altFighterHEP "_altFighterHEP")
				(bind _altDiveHEP "_altDiveHEP")
				(bind _altSkipHEP "_altSkipHEP")
				(bind _airSupDC_Damage "_airSupDC_Damage")
			)
			(bind alpha "slotAlpha")
		)

		(htile
			(class $FullsizeAbsolute)
			(style
				(hitTest = false)
				(width = 42px)
			)
			(controller $Repeat renderer='WeaponSlotUniqueFeatureItem'
				(bind count "uniqueFeatures.length")
				(args
					_featureId = "uniqueFeatures[$index].id"
				)
			)
		)
		
		(block
			(bind visible "isActiveBurst")
			(class $FullsizeAbsolute)
			(style	(backgroundSize = "fill") (hitTest = false)
					(backgroundImage = 'url:../ammo/unique_features/indicators/burst_fire.png')
			)
		)

		(controller $Instance renderer='PingerCountInfoRenderer'
			(bind enabled "isPingerCountEnable")
			(exprs
				(style (position = "absolute"))
				(bind visible "isAltVision")
			)
		)

		
		
		(element SlotReloadBar
			(bind visible "isPingerCountEnable ? (showProgressBar && !isAltVision) : showProgressBar")
			(scope
				(bind _atWork "isWorking")
				(bind _atCharge "isCharging || isAnimated")
				(bind _inverted "false")
				(bind _showTime "!(isAnimated)")
				(bind _percentPassed "progress")
				(bind _remainTime "remain")
			)

			(class $FullsizeAbsolute)
		)

		
		(controller $FxInstance lifetime=0.5
			(bind renderer "'SlotWorkStartedFX'")
			(args accented = "!(isWeaponActive)")
			(bindcall create (event "slot.weaponSlot.evReloaded") (bind enabled "isActive && !(isAirplanesVisType)"))
		)

		(block
			(class $FullsizeAbsolute)
			(tf
				(bind visible "(currentAmmoCount > 0 && !isDisabled && isSecondaryActive)")
				(style (position = "absolute") (top = "XS") (right = "XS"))
				(class $TextDefaultBoldNM)
				(bind text "currentAmmoCount")
			)
			(controller $FxInstance lifetime=0.5
				(bind renderer 'SlotWorkStartedFX')
				(args
					accented="true"
				)
				(bindcall create (bind enabled "isSecondaryAmmoDepleted"))
			)
		)

		
		(controller $Instance (renderer = 'HotkeyIndicator')
			(bind enabled "isHotKeyEnabled")
			(args _commandId="command" _toggled="isHotKeyToggled")
			(exprs
				(scope
					(bind isKeyActive "isHotKeyActive")
				)
				(style
					(bottom = "-HOTKEY_SIZE[SIZE.MEDIUM]")
					(hitTest = false)
					(position = "absolute")
					(hcenter = "0px")
				)
				(bind alpha "(isActive || isSelected) ? 1 : 0.8")
			)
		)

		
		(controller $Instance renderer='LabelAuto'
			(bind enabled "isAutoUsage")
		)

		
		(controller $Instance renderer='PlaneReloadProgressAndAttackersBarSlot'
			(bind enabled "isAirplanesVisType")
			(args "_id" "!(showProgressBar)")
		)
		
		(element HIT_TEST_TOOLTIP_CONTAINER
			(macro MOUSE_LMB_EXTERNAL_CALL 'direct.action' "['weaponSlot.pressed', [command]]" "isHotKeyEnabled")

			(controller $Tooltip
				(renderer='BattleWeaponTooltip')
				(args
					_viewData = "ammoEntity.ammo.viewData"
					_entityId = "ownerEntity.id"
					_isSecondaryActive = "isSecondaryActive"
					_isActiveBurst = "isActiveBurst"
				)
				(align="bottom|center")
				(position="border")
				(offset=[0, 20])
				(screenBoundsOffset={left:10, top:30, right:10, bottom:100})
				(macro SIMPLE_TOOLTIP_ANIMATION)
			)
		)
	)
)
(def layout SlotItem ()
	(scope
		(var _itemImageUrl:str = '')
		(var _isSelectable:bool = true)
		(var _isLocked:bool = false)

		(var _width:number = "SLOT_SIZE")
		(var _height:number = "SLOT_SIZE")

		(var _selectedImageUrl:str = '')
		(var _preSelectedImageUrl:str = '')
		(var _enablePreselectAnimation:bool = true)

		(var _isPreSelected:bool = false)
		(var _isSelected:bool = false)
		(var _selectedAnimation:bool = true)

        (var _vpText:str = '')
		(var _id:str = '')

		(var _overMatch:str = '')
        (var _hePenetration:str = '')
        (var _csPenetration:str = '')
		(var _airSupportP:str = '')

		(var _fighterHEP:str = '')
		(var _diveHEP:str = '')
		(var _skipHEP:str = '')

		(var _altFighterHEP:str = '')
		(var _altDiveHEP:str = '')
		(var _altSkipHEP:str = '')
		(var _airSupDC_Damage:str = '')

		(macro MOUSE_HANDLER_SCOPE)
	)

	(style
		(width = "_width")
		(height = "_height")
	)

	(bind mouseEnabled "_isSelectable")
	(bind mouseChildren "_isSelectable")

	(element SlotImage
		(scope
			(bind _imageUrl "_itemImageUrl" init=false)
		)
		(style
			(bind width  "_width")
			(bind height "_height")
		)
	)

	(element SlotPreSelectedFrame
		(bind visible "_isPreSelected")
		(scope
			(bind _imageUrl "_preSelectedImageUrl")
			(bind _isPreSelected "_isPreSelected")
			(bind _enablePreselectAnimation "_enablePreselectAnimation")
		)
	)

	(element SlotSelectedFrame "_isSelected"
		(bind visible "_isSelected")
		(scope
			(bind _imageUrl "_selectedImageUrl")
			(bind _isSelected "_isSelected")
			(bind _selectedAnimation "_selectedAnimation")
		)
	)

	(element SlotMouseOverAnimationFrame
		(bind visible "_isSelectable")
		(scope
			(bind isEnabled "rollOver")
		)
	)


	(element SlotLockedIndicator "_isLocked")

    #Mod
    (element VpNumber
        (scope
			(bind _vpText "_id == 'ap' ? _overMatch : (_id == 'he' ? _hePenetration : _csPenetration)")
		)
        (bind visible "_id == 'he' || _id == 'ap' || _id == 'cs'")
        (bind text "_vpText")
    )
	(element AirSupVpNumber
        (scope
			(bind _airSupVpText "_id == 'airsupport_he' ? _airSupportP : 'N/A')")
		)
        (bind visible "_id == 'airsupport_he'")
        (bind text "_airSupVpText")
    )
	(element SquaVpNumber
        (scope
			(bind _squaVpText "_id == 'fighter_he' ? _fighterHEP : (_id == 'dive_he' ? _diveHEP : _skipHEP)")
		)
        (bind visible "_id == 'fighter_he' || _id == 'dive_he' || _id == 'skip_he'")
        (bind text "_squaVpText")
    )
	(element AltSquaVpNumber
        (scope
			(bind _altSquaVpText "_id == 'fighter_he_alt' ? _altFighterHEP : (_id == 'dive_he_alt' ? _altDiveHEP : _altSkipHEP)")
		)
        (bind visible "_id == 'fighter_he_alt' || _id == 'dive_he_alt' || _id == 'skip_he_alt'")
        (bind text "_altSquaVpText")
    )
#Test	
#	(element GetIdTextTest
#		(scope
#			#(bind _id "_id")
#		)
#		(bind visible "_id == ''")
#		(bind text "_id")
#	)
    #Mod
)

(def layout VpNumber()

        (scope
            (var _vpText:str = '')
        )
        (block
            (style
                (position = "absolute")
                (left = 31px)
                (top = 5px)
                (pivotX = 0)
                (pivotY = "SLOT_FX_SIZE")
            )
            (tf
                (style
                    (fontSize = 18)
                    (textColor = 0x00FF00)
                )
                (bind text "_vpText")
            )
        )
)
(def layout AirSupVpNumber()

        (scope
            (var _airSupVpText:str = '')
        )
        (block
            (style
                (position = "absolute")
                (left = 38px)
                (top = 5px)
                (pivotX = 0)
                (pivotY = "SLOT_FX_SIZE")
            )
            (tf
                (style
                    (fontSize = 18)
                    (textColor = 0x00FF00)
                )
                (bind text "_airSupVpText")
            )
        )
)
(def layout SquaVpNumber()

        (scope
            (var _squaVpText:str = '')
        )
        (block
            (style
                (position = "absolute")
                (left = 38px)
                (top = 5px)
                (pivotX = 0)
                (pivotY = "SLOT_FX_SIZE")
            )
            (tf
                (style
                    (fontSize = 18)
                    (textColor = 0x00FF00)
                )
                (bind text "_squaVpText")
            )
        )
)
(def layout AltSquaVpNumber()

        (scope
            (var _altSquaVpText:str = '')
        )
        (block
            (style
                (position = "absolute")
                (left = 38px)
                (top = 5px)
                (pivotX = 0)
                (pivotY = "SLOT_FX_SIZE")
            )
            (tf
                (style
                    (fontSize = 18)
                    (textColor = 0x00FF00)
                )
                (bind text "_altSquaVpText")
            )
        )
)

#Test
#(def layout GetIdTextTest()
#		(scope
#			(var _id:str = '11111')
#		)
#		(block
#			(style
#               	(position = "absolute")
#                (left = 5px)
#                (top = -18px)
#                (pivotX = 0)
#                (pivotY = "SLOT_FX_SIZE")
#            )
#            (tf
#                (style
#                    (fontSize = 12)
#                    (textColor = 0xFFB6C1)
#                )
#                (bind text "_id")
#           	)
#		)
#)
